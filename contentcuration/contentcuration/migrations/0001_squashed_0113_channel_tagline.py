# Generated by Django 3.1.4 on 2020-12-15 22:54
import uuid

import django.contrib.postgres.fields.jsonb
import django.db.migrations.operations.special
import django.db.models.deletion
import django.utils.timezone
import mptt.fields
from django.conf import settings
from django.db import migrations
from django.db import models

import contentcuration.models


class Migration(migrations.Migration):

    replaces = [('contentcuration', '0001_squashed_0094_auto_20180910_2342'), ('contentcuration', '0002_auto_20181220_1734'), ('contentcuration', '0003_copy_data'), ('contentcuration', '0004_remove_rename_json_field'), ('contentcuration', '0097_task'), ('contentcuration', '0098_auto_20190424_1709'), ('contentcuration', '0099_auto_20190715_2201'), ('contentcuration', '0100_calculate_included_languages'), ('contentcuration', '0101_extra_fields_json_field'), ('contentcuration', '0102_auto_20190904_1627'), ('contentcuration', '0103_auto_20190905_0408'), ('contentcuration', '0104_auto_20191028_2325'), ('contentcuration', '0105_channel_published_data'), ('contentcuration', '0106_auto_20191113_0217'), ('contentcuration', '0107_auto_20191115_2344'), ('contentcuration', '0108_mptt_tree_id_migration'), ('contentcuration', '0109_auto_20191202_1759'), ('contentcuration', '0110_auto_20200511_2245'), ('contentcuration', '0111_auto_20200513_2252'), ('contentcuration', '0112_auto_20200613_0050'), ('contentcuration', '0113_channel_tagline')]

    initial = True

    dependencies = [
        ('auth', '0007_alter_validators_add_error_messages'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('email', models.EmailField(max_length=100, unique=True)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('is_admin', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
        ),
        migrations.CreateModel(
            name='Channel',
            fields=[
                ('id', contentcuration.models.UUIDField(default=uuid.uuid4, max_length=32, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.CharField(blank=True, max_length=400)),
                ('version', models.IntegerField(default=0)),
                ('thumbnail', models.TextField(blank=True)),
                ('deleted', models.BooleanField(default=False)),
                ('public', models.BooleanField(default=False)),
                ('bookmarked_by', models.ManyToManyField(related_name='bookmarked_channels', to=settings.AUTH_USER_MODEL, verbose_name='bookmarked by')),
            ],
            options={
                'verbose_name': 'Channel',
                'verbose_name_plural': 'Channels',
            },
        ),
        migrations.CreateModel(
            name='ContentKind',
            fields=[
                ('kind', models.CharField(choices=[('topic', 'Topic'), ('video', 'Video'), ('audio', 'Audio'), ('exercise', 'Exercise'), ('document', 'Document'), ('html5', 'HTML5 App')], max_length=200, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='ContentNode',
            fields=[
                ('id', contentcuration.models.UUIDField(default=uuid.uuid4, max_length=32, primary_key=True, serialize=False)),
                ('content_id', contentcuration.models.UUIDField(default=uuid.uuid4, editable=False, max_length=32)),
                ('title', models.CharField(max_length=200)),
                ('description', models.CharField(blank=True, max_length=400)),
                ('sort_order', models.FloatField(default=0, help_text='Ascending, lowest number shown first', max_length=50, verbose_name='sort order')),
                ('license_owner', models.CharField(blank=True, help_text='Organization of person who holds the essential rights', max_length=200)),
                ('author', models.CharField(blank=True, help_text='Person who created content', max_length=200)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='modified')),
                ('changed', models.BooleanField(default=True)),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('cloned_source', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='clones', to='contentcuration.contentnode')),
            ],
            options={
                'verbose_name': 'Topic',
                'verbose_name_plural': 'Topics',
            },
        ),
        migrations.CreateModel(
            name='ContentTag',
            fields=[
                ('id', contentcuration.models.UUIDField(default=uuid.uuid4, max_length=32, primary_key=True, serialize=False)),
                ('tag_name', models.CharField(max_length=30)),
                ('channel', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tags', to='contentcuration.channel')),
            ],
            options={
                'unique_together': {('tag_name', 'channel')},
            },
        ),
        migrations.CreateModel(
            name='FileFormat',
            fields=[
                ('extension', models.CharField(choices=[('mp4', 'MP4 Video'), ('vtt', 'VTT Subtitle'), ('mp3', 'MP3 Audio'), ('pdf', 'PDF Document'), ('jpg', 'JPG Image'), ('jpeg', 'JPEG Image'), ('png', 'PNG Image'), ('gif', 'GIF Image'), ('json', 'JSON'), ('svg', 'SVG Image'), ('perseus', 'Perseus Exercise'), ('graphie', 'Graphie Exercise'), ('zip', 'HTML5 Zip'), ('epub', 'ePub Document')], max_length=40, primary_key=True, serialize=False)),
                ('mimetype', models.CharField(blank=True, max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='FormatPreset',
            fields=[
                ('id', models.CharField(choices=[('high_res_video', 'High Resolution'), ('low_res_video', 'Low Resolution'), ('vector_video', 'Vectorized'), ('video_thumbnail', 'Thumbnail'), ('video_subtitle', 'Subtitle'), ('video_dependency', 'Video (dependency)'), ('audio', 'Audio'), ('audio_thumbnail', 'Thumbnail'), ('document', 'Document'), ('epub', 'ePub Document'), ('document_thumbnail', 'Thumbnail'), ('exercise', 'Exercise'), ('exercise_thumbnail', 'Thumbnail'), ('exercise_image', 'Exercise Image'), ('exercise_graphie', 'Exercise Graphie'), ('channel_thumbnail', 'Channel Thumbnail'), ('topic_thumbnail', 'Thumbnail'), ('html5_zip', 'HTML5 Zip'), ('html5_dependency', 'HTML5 Dependency (Zip format)'), ('html5_thumbnail', 'HTML5 Thumbnail')], max_length=150, primary_key=True, serialize=False)),
                ('readable_name', models.CharField(max_length=400)),
                ('multi_language', models.BooleanField(default=False)),
                ('supplementary', models.BooleanField(default=False)),
                ('order', models.IntegerField(default=0)),
                ('allowed_formats', models.ManyToManyField(blank=True, to='contentcuration.FileFormat')),
                ('kind', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='format_presets', to='contentcuration.contentkind')),
                ('thumbnail', models.BooleanField(default=False)),
                ('display', models.BooleanField(default=True)),
                ('subtitle', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Invitation',
            fields=[
                ('id', contentcuration.models.UUIDField(default=uuid.uuid4, max_length=32, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=100, null=True)),
                ('first_name', models.CharField(default='Guest', max_length=100)),
                ('last_name', models.CharField(blank=True, max_length=100, null=True)),
                ('channel', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pending_editors', to='contentcuration.channel')),
                ('invited', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sent_to', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sent_by', to=settings.AUTH_USER_MODEL)),
                ('share_mode', models.CharField(default='edit', max_length=50)),
            ],
            options={
                'verbose_name': 'Invitation',
                'verbose_name_plural': 'Invitations',
            },
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.CharField(max_length=14, primary_key=True, serialize=False)),
                ('lang_code', models.CharField(db_index=True, max_length=3)),
                ('lang_subcode', models.CharField(blank=True, db_index=True, max_length=10, null=True)),
                ('readable_name', models.CharField(blank=True, max_length=100)),
                ('native_name', models.CharField(blank=True, max_length=100)),
                ('lang_direction', models.CharField(choices=[('ltr', 'Left to Right'), ('rtl', 'Right to Left')], default='ltr', max_length=3)),
            ],
        ),
        migrations.CreateModel(
            name='License',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('license_name', models.CharField(max_length=50)),
                ('license_url', models.URLField(blank=True)),
                ('license_description', models.TextField(blank=True)),
                ('exists', models.BooleanField(default=False, help_text='Tells whether or not a content item is licensed to share', verbose_name='license exists')),
                ('copyright_holder_required', models.BooleanField(default=True)),
                ('is_custom', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='PrerequisiteContentRelationship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prerequisite', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contentcuration_prerequisitecontentrelationship_prerequisite', to='contentcuration.contentnode')),
                ('target_node', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contentcuration_prerequisitecontentrelationship_target_node', to='contentcuration.contentnode')),
            ],
            options={
                'unique_together': {('target_node', 'prerequisite')},
            },
        ),
        migrations.CreateModel(
            name='RelatedContentRelationship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contentnode_1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contentcuration_relatedcontentrelationship_1', to='contentcuration.contentnode')),
                ('contentnode_2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contentcuration_relatedcontentrelationship_2', to='contentcuration.contentnode')),
            ],
            options={
                'unique_together': {('contentnode_1', 'contentnode_2')},
            },
        ),
        migrations.AddField(
            model_name='contentnode',
            name='is_related',
            field=models.ManyToManyField(blank=True, related_name='relate_to', through='contentcuration.RelatedContentRelationship', to='contentcuration.ContentNode'),
        ),
        migrations.AddField(
            model_name='contentnode',
            name='kind',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contentnodes', to='contentcuration.contentkind'),
        ),
        migrations.AddField(
            model_name='contentnode',
            name='license',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='contentcuration.license'),
        ),
        migrations.AddField(
            model_name='contentnode',
            name='original_node',
            field=mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='duplicates', to='contentcuration.contentnode'),
        ),
        migrations.AddField(
            model_name='contentnode',
            name='parent',
            field=mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='contentcuration.contentnode'),
        ),
        migrations.AddField(
            model_name='contentnode',
            name='prerequisite',
            field=models.ManyToManyField(blank=True, related_name='is_prerequisite_of', through='contentcuration.PrerequisiteContentRelationship', to='contentcuration.ContentNode'),
        ),
        migrations.AddField(
            model_name='contentnode',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='tagged_content', to='contentcuration.ContentTag'),
        ),
        migrations.AddField(
            model_name='channel',
            name='clipboard_tree',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='channel_clipboard', to='contentcuration.contentnode'),
        ),
        migrations.AddField(
            model_name='channel',
            name='editors',
            field=models.ManyToManyField(blank=True, help_text='Users with edit rights', related_name='editable_channels', to=settings.AUTH_USER_MODEL, verbose_name='editors'),
        ),
        migrations.AddField(
            model_name='channel',
            name='main_tree',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='channel_main', to='contentcuration.contentnode'),
        ),
        migrations.AddField(
            model_name='channel',
            name='trash_tree',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='channel_trash', to='contentcuration.contentnode'),
        ),
        migrations.AddField(
            model_name='user',
            name='clipboard_tree',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_clipboard', to='contentcuration.contentnode'),
        ),
        migrations.RenameField(
            model_name='contentnode',
            old_name='license_owner',
            new_name='copyright_holder',
        ),
        migrations.AlterModelManagers(
            name='contentnode',
            managers=[
            ],
        ),
        migrations.AddField(
            model_name='contentnode',
            name='published',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name='contentnode',
            name='sort_order',
            field=models.FloatField(default=1, help_text='Ascending, lowest number shown first', max_length=50, verbose_name='sort order'),
        ),
        migrations.AddField(
            model_name='channel',
            name='staging_tree',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='channel_staging', to='contentcuration.contentnode'),
        ),
        migrations.AddField(
            model_name='contentnode',
            name='node_id',
            field=contentcuration.models.UUIDField(default=uuid.uuid4, editable=False, max_length=32),
        ),
        migrations.AddField(
            model_name='channel',
            name='language',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='channel_language', to='contentcuration.language'),
        ),
        migrations.AlterField(
            model_name='channel',
            name='thumbnail',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.CreateModel(
            name='Exercise',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contentnode', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='exercise', to='contentcuration.contentnode')),
                ('mastery_model', models.CharField(choices=[('do_all', 'Do all'), ('num_correct_in_a_row_2', '2 in a row'), ('num_correct_in_a_row_10', '10 in a row'), ('num_correct_in_a_row_3', '3 in a row'), ('num_correct_in_a_row_5', '5 in a row'), ('skill_check', 'Skill check'), ('m_of_n', 'M out of N')], default='do_all', max_length=200)),
            ],
        ),
        migrations.AddField(
            model_name='contentnode',
            name='extra_fields',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='contentnode',
            name='license',
            field=models.ForeignKey(default=1, null=True, on_delete=django.db.models.deletion.CASCADE, to='contentcuration.license'),
        ),
        migrations.CreateModel(
            name='AssessmentItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(default='multiplechoice', max_length=50)),
                ('question', models.TextField(blank=True)),
                ('answers', models.TextField(default='[]')),
                ('contentnode', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='assessment_items', to='contentcuration.contentnode')),
                ('order', models.IntegerField(default=1)),
                ('assessment_id', contentcuration.models.UUIDField(default=uuid.uuid4, editable=False, max_length=32)),
                ('raw_data', models.TextField(blank=True)),
                ('hints', models.TextField(default='[]')),
                ('source_url', models.CharField(blank=True, max_length=400, null=True)),
                ('randomize', models.BooleanField(default=False)),
                ('deleted', models.BooleanField(default=False)),
            ],
        ),
        migrations.RemoveField(
            model_name='contentnode',
            name='author',
        ),
        migrations.AddField(
            model_name='contentnode',
            name='author',
            field=models.CharField(blank=True, default='', help_text='Who created this content?', max_length=200, null=True),
        ),
        migrations.AddField(
            model_name='channel',
            name='previous_tree',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='channel_previous', to='contentcuration.contentnode'),
        ),
        migrations.AlterField(
            model_name='channel',
            name='name',
            field=models.CharField(blank=True, max_length=200),
        ),
        migrations.AddField(
            model_name='channel',
            name='viewers',
            field=models.ManyToManyField(blank=True, help_text='Users with view only rights', related_name='view_only_channels', to=settings.AUTH_USER_MODEL, verbose_name='viewers'),
        ),
        migrations.AlterField(
            model_name='channel',
            name='name',
            field=models.CharField(blank=True, max_length=200),
        ),
        migrations.AlterField(
            model_name='contentnode',
            name='description',
            field=models.TextField(blank=True),
        ),
        migrations.AlterField(
            model_name='channel',
            name='name',
            field=models.CharField(blank=True, max_length=200),
        ),
        migrations.AddField(
            model_name='contentnode',
            name='original_channel_id',
            field=contentcuration.models.UUIDField(db_index=True, editable=False, max_length=32, null=True),
        ),
        migrations.AddField(
            model_name='contentnode',
            name='source_channel_id',
            field=contentcuration.models.UUIDField(editable=False, max_length=32, null=True),
        ),
        migrations.AlterField(
            model_name='contentnode',
            name='copyright_holder',
            field=models.CharField(blank=True, default='', help_text='Organization of person who holds the essential rights', max_length=200),
        ),
        migrations.AddField(
            model_name='contentnode',
            name='original_source_node_id',
            field=contentcuration.models.UUIDField(db_index=True, editable=False, max_length=32, null=True),
        ),
        migrations.AddField(
            model_name='contentnode',
            name='source_node_id',
            field=contentcuration.models.UUIDField(editable=False, max_length=32, null=True),
        ),
        migrations.AddField(
            model_name='channel',
            name='ricecooker_version',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='channel',
            name='source_domain',
            field=models.CharField(blank=True, max_length=300, null=True),
        ),
        migrations.AddField(
            model_name='channel',
            name='source_id',
            field=models.CharField(blank=True, max_length=200, null=True),
        ),
        migrations.AddField(
            model_name='contentnode',
            name='source_domain',
            field=models.CharField(blank=True, max_length=300, null=True),
        ),
        migrations.AddField(
            model_name='contentnode',
            name='source_id',
            field=models.CharField(blank=True, max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='channel',
            name='deleted',
            field=models.BooleanField(db_index=True, default=False),
        ),
        migrations.AlterField(
            model_name='channel',
            name='public',
            field=models.BooleanField(db_index=True, default=False),
        ),
        migrations.AlterField(
            model_name='contentnode',
            name='changed',
            field=models.BooleanField(db_index=True, default=True),
        ),
        migrations.CreateModel(
            name='ChannelResourceSize',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tree_id', models.IntegerField()),
                ('resource_size', models.IntegerField()),
            ],
            options={
                'db_table': 'contentcuration_channel_resource_sizes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ChannelResourceSize',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tree_id', models.IntegerField()),
                ('resource_size', models.IntegerField()),
            ],
            options={
                'db_table': 'contentcuration_channel_resource_sizes',
                'managed': False,
            },
        ),
        migrations.AddField(
            model_name='user',
            name='preferences',
            field=models.TextField(default='{"auto_derive_exercise_thumbnail": true, "auto_derive_video_thumbnail": true, "m_value": 5, "language": null, "license": null, "author": null, "aggregator": null, "auto_randomize_questions": true, "auto_derive_document_thumbnail": true, "copyright_holder": null, "auto_derive_html5_thumbnail": true, "provider": null, "auto_derive_audio_thumbnail": true, "license_description": null, "n_value": 5, "mastery_model": "num_correct_in_a_row_5"}'),
        ),
        migrations.AddField(
            model_name='contentnode',
            name='license_description',
            field=models.CharField(blank=True, max_length=400, null=True),
        ),
        migrations.AlterField(
            model_name='contentnode',
            name='copyright_holder',
            field=models.CharField(blank=True, default='', help_text='Organization of person who holds the essential rights', max_length=200, null=True),
        ),
        migrations.AddField(
            model_name='user',
            name='date_joined',
            field=models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='is_staff',
            field=models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status'),
        ),
        migrations.AddField(
            model_name='user',
            name='is_superuser',
            field=models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AlterField(
            model_name='user',
            name='is_active',
            field=models.BooleanField(default=False, help_text='Designates whether this user should be treated as active.', verbose_name='active'),
        ),
        migrations.AddField(
            model_name='channel',
            name='chef_tree',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='channel_chef', to='contentcuration.contentnode'),
        ),
        migrations.AddField(
            model_name='channel',
            name='preferences',
            field=models.TextField(default='{"auto_derive_exercise_thumbnail": true, "auto_derive_video_thumbnail": true, "m_value": 5, "language": null, "license": null, "author": null, "aggregator": null, "auto_randomize_questions": true, "auto_derive_document_thumbnail": true, "copyright_holder": null, "auto_derive_html5_thumbnail": true, "provider": null, "auto_derive_audio_thumbnail": true, "license_description": null, "n_value": 5, "mastery_model": "num_correct_in_a_row_5"}'),
        ),
        migrations.AddField(
            model_name='channel',
            name='thumbnail_encoding',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='contentnode',
            name='thumbnail_encoding',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='contentnode',
            name='content_id',
            field=contentcuration.models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, max_length=32),
        ),
        migrations.AddField(
            model_name='contentnode',
            name='language',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='content_language', to='contentcuration.language'),
        ),
        migrations.CreateModel(
            name='SecretToken',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=100, unique=True)),
                ('is_primary', models.BooleanField(default=False)),
            ],
        ),
        migrations.AddField(
            model_name='channel',
            name='secret_tokens',
            field=models.ManyToManyField(blank=True, related_name='channels', to='contentcuration.SecretToken', verbose_name='secret tokens'),
        ),
        migrations.AddField(
            model_name='channel',
            name='priority',
            field=models.IntegerField(default=0, help_text='Order to display public channels'),
        ),
        migrations.AddField(
            model_name='user',
            name='disk_space',
            field=models.FloatField(default=524288000, help_text='How many bytes a user can upload'),
        ),
        migrations.CreateModel(
            name='StagedFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('checksum', models.CharField(blank=True, db_index=True, max_length=400)),
                ('file_size', models.IntegerField(blank=True, null=True)),
                ('uploaded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='staged_files', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='contentnode',
            name='freeze_authoring_data',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name='contentnode',
            name='license',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contentcuration.license'),
        ),
        migrations.AddField(
            model_name='channel',
            name='icon_encoding',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='channel',
            name='last_published',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='channel',
            name='included_languages',
            field=models.ManyToManyField(blank=True, related_name='channels', to='contentcuration.Language', verbose_name='languages'),
        ),
        migrations.AddField(
            model_name='channel',
            name='published_kind_count',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='channel',
            name='published_size',
            field=models.FloatField(default=0),
        ),
        migrations.AddField(
            model_name='channel',
            name='total_resource_count',
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name='contentnode',
            name='publishing',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='user',
            name='information',
            field=django.contrib.postgres.fields.jsonb.JSONField(null=True),
        ),
        migrations.AddField(
            model_name='channel',
            name='content_defaults',
            field=django.contrib.postgres.fields.jsonb.JSONField(default=dict),
        ),
        migrations.AlterIndexTogether(
            name='channel',
            index_together={('deleted', 'public')},
        ),
        migrations.AddField(
            model_name='contentnode',
            name='role_visibility',
            field=models.CharField(choices=[('coach', 'Coach'), ('learner', 'Learner')], default='learner', max_length=50),
        ),
        migrations.AddField(
            model_name='user',
            name='content_defaults',
            field=django.contrib.postgres.fields.jsonb.JSONField(default=dict),
        ),
        migrations.AddField(
            model_name='user',
            name='policies',
            field=django.contrib.postgres.fields.jsonb.JSONField(default=dict, null=True),
        ),
        migrations.AddField(
            model_name='contentnode',
            name='aggregator',
            field=models.CharField(blank=True, default='', help_text='Who gathered this content together?', max_length=200, null=True),
        ),
        migrations.AddField(
            model_name='contentnode',
            name='provider',
            field=models.CharField(blank=True, default='', help_text='Who distributed this content?', max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='contentnode',
            name='changed',
            field=models.BooleanField(default=True),
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', contentcuration.models.UUIDField(default=uuid.uuid4, max_length=32, primary_key=True, serialize=False)),
                ('checksum', models.CharField(blank=True, db_index=True, max_length=400)),
                ('file_size', models.IntegerField(blank=True, null=True)),
                ('file_on_disk', models.FileField(blank=True, max_length=500, upload_to=contentcuration.models.object_storage_name)),
                ('original_filename', models.CharField(blank=True, max_length=255)),
                ('contentnode', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='files', to='contentcuration.contentnode')),
                ('file_format', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='files', to='contentcuration.fileformat')),
                ('language', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='files', to='contentcuration.language')),
                ('preset', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='files', to='contentcuration.formatpreset')),
                ('source_url', models.CharField(blank=True, max_length=400, null=True)),
                ('assessment_item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='files', to='contentcuration.assessmentitem')),
                ('uploaded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='files', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ChannelSet',
            fields=[
                ('id', contentcuration.models.UUIDField(default=uuid.uuid4, max_length=32, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=200)),
                ('description', models.CharField(blank=True, max_length=400)),
                ('public', models.BooleanField(db_index=True, default=False)),
                ('editors', models.ManyToManyField(blank=True, help_text='Users with edit rights', related_name='channel_sets', to=settings.AUTH_USER_MODEL, verbose_name='editors')),
                ('secret_token', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='channel_sets', to='contentcuration.secrettoken')),
            ],
        ),
        migrations.AddField(
            model_name='channel',
            name='thumbnail_encoding_json',
            field=django.contrib.postgres.fields.jsonb.JSONField(default=dict),
        ),
        migrations.RemoveField(
            model_name='channel',
            name='thumbnail_encoding',
        ),
        migrations.RenameField(
            model_name='channel',
            old_name='thumbnail_encoding_json',
            new_name='thumbnail_encoding',
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_type', models.CharField(max_length=50)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('status', models.CharField(max_length=10)),
                ('is_progress_tracking', models.BooleanField(default=False)),
                ('metadata', django.contrib.postgres.fields.jsonb.JSONField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='task', to=settings.AUTH_USER_MODEL)),
                ('task_id', contentcuration.models.UUIDField(db_index=True, default=uuid.uuid4, max_length=32)),
            ],
        ),
        migrations.AlterField(
            model_name='formatpreset',
            name='id',
            field=models.CharField(choices=[('high_res_video', 'High Resolution'), ('low_res_video', 'Low Resolution'), ('video_thumbnail', 'Thumbnail'), ('video_subtitle', 'Subtitle'), ('video_dependency', 'Video (dependency)'), ('audio', 'Audio'), ('audio_thumbnail', 'Thumbnail'), ('document', 'Document'), ('epub', 'ePub Document'), ('document_thumbnail', 'Thumbnail'), ('exercise', 'Exercise'), ('exercise_thumbnail', 'Thumbnail'), ('exercise_image', 'Exercise Image'), ('exercise_graphie', 'Exercise Graphie'), ('channel_thumbnail', 'Channel Thumbnail'), ('topic_thumbnail', 'Thumbnail'), ('html5_zip', 'HTML5 Zip'), ('html5_dependency', 'HTML5 Dependency (Zip format)'), ('html5_thumbnail', 'HTML5 Thumbnail')], max_length=150, primary_key=True, serialize=False),
        ),
        migrations.CreateModel(
            name='SlideshowSlide',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.FloatField(default=1.0)),
                ('metadata', django.contrib.postgres.fields.jsonb.JSONField(default={})),
                ('contentnode', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='slideshow_slides', to='contentcuration.contentnode')),
            ],
        ),
        migrations.AlterField(
            model_name='contentkind',
            name='kind',
            field=models.CharField(choices=[('topic', 'Topic'), ('video', 'Video'), ('audio', 'Audio'), ('exercise', 'Exercise'), ('document', 'Document'), ('html5', 'HTML5 App'), ('slideshow', 'Slideshow')], max_length=200, primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name='formatpreset',
            name='id',
            field=models.CharField(choices=[('high_res_video', 'High Resolution'), ('low_res_video', 'Low Resolution'), ('video_thumbnail', 'Thumbnail'), ('video_subtitle', 'Subtitle'), ('video_dependency', 'Video (dependency)'), ('audio', 'Audio'), ('audio_thumbnail', 'Thumbnail'), ('document', 'Document'), ('epub', 'ePub Document'), ('document_thumbnail', 'Thumbnail'), ('exercise', 'Exercise'), ('exercise_thumbnail', 'Thumbnail'), ('exercise_image', 'Exercise Image'), ('exercise_graphie', 'Exercise Graphie'), ('channel_thumbnail', 'Channel Thumbnail'), ('topic_thumbnail', 'Thumbnail'), ('html5_zip', 'HTML5 Zip'), ('html5_dependency', 'HTML5 Dependency (Zip format)'), ('html5_thumbnail', 'HTML5 Thumbnail'), ('slideshow_image', 'Slideshow Image'), ('slideshow_thumbnail', 'Slideshow Thumbnail'), ('slideshow_manifest', 'Slideshow Manifest')], max_length=150, primary_key=True, serialize=False),
        ),
        migrations.AddField(
            model_name='file',
            name='slideshow_slide',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='files', to='contentcuration.slideshowslide'),
        ),
        migrations.AlterField(
            model_name='contenttag',
            name='tag_name',
            field=models.CharField(max_length=50),
        ),
        migrations.AlterField(
            model_name='contentnode',
            name='extra_fields',
            field=django.contrib.postgres.fields.jsonb.JSONField(default=dict),
        ),
        migrations.AlterField(
            model_name='fileformat',
            name='extension',
            field=models.CharField(choices=[('mp4', 'MP4 Video'), ('vtt', 'VTT Subtitle'), ('mp3', 'MP3 Audio'), ('pdf', 'PDF Document'), ('jpg', 'JPG Image'), ('jpeg', 'JPEG Image'), ('png', 'PNG Image'), ('gif', 'GIF Image'), ('json', 'JSON'), ('svg', 'SVG Image'), ('perseus', 'Perseus Exercise'), ('graphie', 'Graphie Exercise'), ('zip', 'HTML5 Zip'), ('h5p', 'H5P'), ('epub', 'ePub Document')], max_length=40, primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name='formatpreset',
            name='id',
            field=models.CharField(choices=[('high_res_video', 'High Resolution'), ('low_res_video', 'Low Resolution'), ('video_thumbnail', 'Thumbnail'), ('video_subtitle', 'Subtitle'), ('video_dependency', 'Video (dependency)'), ('audio', 'Audio'), ('audio_thumbnail', 'Thumbnail'), ('document', 'Document'), ('epub', 'ePub Document'), ('document_thumbnail', 'Thumbnail'), ('exercise', 'Exercise'), ('exercise_thumbnail', 'Thumbnail'), ('exercise_image', 'Exercise Image'), ('exercise_graphie', 'Exercise Graphie'), ('channel_thumbnail', 'Channel Thumbnail'), ('topic_thumbnail', 'Thumbnail'), ('html5_zip', 'HTML5 Zip'), ('html5_dependency', 'HTML5 Dependency (Zip format)'), ('html5_thumbnail', 'HTML5 Thumbnail'), ('h5p', 'H5P Zip'), ('h5p_thumbnail', 'H5P Thumbnail'), ('slideshow_image', 'Slideshow Image'), ('slideshow_thumbnail', 'Slideshow Thumbnail'), ('slideshow_manifest', 'Slideshow Manifest')], max_length=150, primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name='formatpreset',
            name='id',
            field=models.CharField(choices=[('high_res_video', 'High Resolution'), ('low_res_video', 'Low Resolution'), ('video_thumbnail', 'Thumbnail'), ('video_subtitle', 'Subtitle'), ('video_dependency', 'Video (dependency)'), ('audio', 'Audio'), ('audio_thumbnail', 'Thumbnail'), ('document', 'Document'), ('epub', 'ePub Document'), ('document_thumbnail', 'Thumbnail'), ('exercise', 'Exercise'), ('exercise_thumbnail', 'Thumbnail'), ('exercise_image', 'Exercise Image'), ('exercise_graphie', 'Exercise Graphie'), ('channel_thumbnail', 'Channel Thumbnail'), ('topic_thumbnail', 'Thumbnail'), ('html5_zip', 'HTML5 Zip'), ('html5_dependency', 'HTML5 Dependency (Zip format)'), ('html5_thumbnail', 'HTML5 Thumbnail'), ('h5p', 'H5P Zip'), ('slideshow_image', 'Slideshow Image'), ('slideshow_thumbnail', 'Slideshow Thumbnail'), ('slideshow_manifest', 'Slideshow Manifest')], max_length=150, primary_key=True, serialize=False),
        ),
        migrations.AddField(
            model_name='channel',
            name='published_data',
            field=django.contrib.postgres.fields.jsonb.JSONField(default=dict),
        ),
        migrations.CreateModel(
            name='MPTTTreeIDManager',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.AlterField(
            model_name='fileformat',
            name='extension',
            field=models.CharField(choices=[('mp4', 'MP4 Video'), ('vtt', 'VTT Subtitle'), ('mp3', 'MP3 Audio'), ('pdf', 'PDF Document'), ('jpg', 'JPG Image'), ('jpeg', 'JPEG Image'), ('png', 'PNG Image'), ('gif', 'GIF Image'), ('json', 'JSON'), ('svg', 'SVG Image'), ('perseus', 'Perseus Exercise'), ('graphie', 'Graphie Exercise'), ('zip', 'HTML5 Zip'), ('epub', 'ePub Document')], max_length=40, primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name='formatpreset',
            name='id',
            field=models.CharField(choices=[('high_res_video', 'High Resolution'), ('low_res_video', 'Low Resolution'), ('video_thumbnail', 'Thumbnail'), ('video_subtitle', 'Subtitle'), ('video_dependency', 'Video (dependency)'), ('audio', 'Audio'), ('audio_thumbnail', 'Thumbnail'), ('document', 'Document'), ('epub', 'ePub Document'), ('document_thumbnail', 'Thumbnail'), ('exercise', 'Exercise'), ('exercise_thumbnail', 'Thumbnail'), ('exercise_image', 'Exercise Image'), ('exercise_graphie', 'Exercise Graphie'), ('channel_thumbnail', 'Channel Thumbnail'), ('topic_thumbnail', 'Thumbnail'), ('html5_zip', 'HTML5 Zip'), ('html5_dependency', 'HTML5 Dependency (Zip format)'), ('html5_thumbnail', 'HTML5 Thumbnail'), ('slideshow_image', 'Slideshow Image'), ('slideshow_thumbnail', 'Slideshow Thumbnail'), ('slideshow_manifest', 'Slideshow Manifest')], max_length=150, primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name='contentnode',
            name='extra_fields',
            field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True),
        ),
        migrations.AddField(
            model_name='channel',
            name='demo_server_url',
            field=models.CharField(blank=True, max_length=200, null=True),
        ),
        migrations.AddField(
            model_name='channel',
            name='source_url',
            field=models.CharField(blank=True, max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='contentkind',
            name='kind',
            field=models.CharField(choices=[('topic', 'Topic'), ('video', 'Video'), ('audio', 'Audio'), ('exercise', 'Exercise'), ('document', 'Document'), ('html5', 'HTML5 App'), ('slideshow', 'Slideshow'), ('h5p', 'H5P')], max_length=200, primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name='fileformat',
            name='extension',
            field=models.CharField(choices=[('mp4', 'MP4 Video'), ('vtt', 'VTT Subtitle'), ('mp3', 'MP3 Audio'), ('pdf', 'PDF Document'), ('jpg', 'JPG Image'), ('jpeg', 'JPEG Image'), ('png', 'PNG Image'), ('gif', 'GIF Image'), ('json', 'JSON'), ('svg', 'SVG Image'), ('perseus', 'Perseus Exercise'), ('graphie', 'Graphie Exercise'), ('zip', 'HTML5 Zip'), ('h5p', 'H5P'), ('epub', 'ePub Document')], max_length=40, primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name='formatpreset',
            name='id',
            field=models.CharField(choices=[('high_res_video', 'High Resolution'), ('low_res_video', 'Low Resolution'), ('video_thumbnail', 'Thumbnail'), ('video_subtitle', 'Subtitle'), ('video_dependency', 'Video (dependency)'), ('audio', 'Audio'), ('audio_thumbnail', 'Thumbnail'), ('document', 'Document'), ('epub', 'ePub Document'), ('document_thumbnail', 'Thumbnail'), ('exercise', 'Exercise'), ('exercise_thumbnail', 'Thumbnail'), ('exercise_image', 'Exercise Image'), ('exercise_graphie', 'Exercise Graphie'), ('channel_thumbnail', 'Channel Thumbnail'), ('topic_thumbnail', 'Thumbnail'), ('html5_zip', 'HTML5 Zip'), ('html5_dependency', 'HTML5 Dependency (Zip format)'), ('html5_thumbnail', 'HTML5 Thumbnail'), ('h5p', 'H5P Zip'), ('h5p_thumbnail', 'H5P Thumbnail'), ('slideshow_image', 'Slideshow Image'), ('slideshow_thumbnail', 'Slideshow Thumbnail'), ('slideshow_manifest', 'Slideshow Manifest')], max_length=150, primary_key=True, serialize=False),
        ),
        migrations.AddField(
            model_name='channel',
            name='tagline',
            field=models.CharField(blank=True, max_length=150, null=True),
        ),
    ]
